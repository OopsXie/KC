// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: dataServer.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataServerService_WriteBlock_FullMethodName  = "/dfs_project.DataServerService/WriteBlock"
	DataServerService_ReadBlock_FullMethodName   = "/dfs_project.DataServerService/ReadBlock"
	DataServerService_DeleteBlock_FullMethodName = "/dfs_project.DataServerService/DeleteBlock"
	DataServerService_CopyBlock_FullMethodName   = "/dfs_project.DataServerService/CopyBlock"
)

// DataServerServiceClient is the client API for DataServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServerServiceClient interface {
	WriteBlock(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WriteBlockRequest, WriteBlockResponse], error)
	ReadBlock(ctx context.Context, in *ReadBlockRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadBlockResponse], error)
	DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*DeleteBlockResponse, error)
	CopyBlock(ctx context.Context, in *CopyBlockRequest, opts ...grpc.CallOption) (*CopyBlockResponse, error)
}

type dataServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServerServiceClient(cc grpc.ClientConnInterface) DataServerServiceClient {
	return &dataServerServiceClient{cc}
}

func (c *dataServerServiceClient) WriteBlock(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[WriteBlockRequest, WriteBlockResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataServerService_ServiceDesc.Streams[0], DataServerService_WriteBlock_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WriteBlockRequest, WriteBlockResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataServerService_WriteBlockClient = grpc.ClientStreamingClient[WriteBlockRequest, WriteBlockResponse]

func (c *dataServerServiceClient) ReadBlock(ctx context.Context, in *ReadBlockRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadBlockResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataServerService_ServiceDesc.Streams[1], DataServerService_ReadBlock_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadBlockRequest, ReadBlockResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataServerService_ReadBlockClient = grpc.ServerStreamingClient[ReadBlockResponse]

func (c *dataServerServiceClient) DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*DeleteBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBlockResponse)
	err := c.cc.Invoke(ctx, DataServerService_DeleteBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServerServiceClient) CopyBlock(ctx context.Context, in *CopyBlockRequest, opts ...grpc.CallOption) (*CopyBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyBlockResponse)
	err := c.cc.Invoke(ctx, DataServerService_CopyBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServerServiceServer is the server API for DataServerService service.
// All implementations must embed UnimplementedDataServerServiceServer
// for forward compatibility.
type DataServerServiceServer interface {
	WriteBlock(grpc.ClientStreamingServer[WriteBlockRequest, WriteBlockResponse]) error
	ReadBlock(*ReadBlockRequest, grpc.ServerStreamingServer[ReadBlockResponse]) error
	DeleteBlock(context.Context, *DeleteBlockRequest) (*DeleteBlockResponse, error)
	CopyBlock(context.Context, *CopyBlockRequest) (*CopyBlockResponse, error)
	mustEmbedUnimplementedDataServerServiceServer()
}

// UnimplementedDataServerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataServerServiceServer struct{}

func (UnimplementedDataServerServiceServer) WriteBlock(grpc.ClientStreamingServer[WriteBlockRequest, WriteBlockResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WriteBlock not implemented")
}
func (UnimplementedDataServerServiceServer) ReadBlock(*ReadBlockRequest, grpc.ServerStreamingServer[ReadBlockResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadBlock not implemented")
}
func (UnimplementedDataServerServiceServer) DeleteBlock(context.Context, *DeleteBlockRequest) (*DeleteBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlock not implemented")
}
func (UnimplementedDataServerServiceServer) CopyBlock(context.Context, *CopyBlockRequest) (*CopyBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyBlock not implemented")
}
func (UnimplementedDataServerServiceServer) mustEmbedUnimplementedDataServerServiceServer() {}
func (UnimplementedDataServerServiceServer) testEmbeddedByValue()                           {}

// UnsafeDataServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServerServiceServer will
// result in compilation errors.
type UnsafeDataServerServiceServer interface {
	mustEmbedUnimplementedDataServerServiceServer()
}

func RegisterDataServerServiceServer(s grpc.ServiceRegistrar, srv DataServerServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataServerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataServerService_ServiceDesc, srv)
}

func _DataServerService_WriteBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServerServiceServer).WriteBlock(&grpc.GenericServerStream[WriteBlockRequest, WriteBlockResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataServerService_WriteBlockServer = grpc.ClientStreamingServer[WriteBlockRequest, WriteBlockResponse]

func _DataServerService_ReadBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadBlockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServerServiceServer).ReadBlock(m, &grpc.GenericServerStream[ReadBlockRequest, ReadBlockResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataServerService_ReadBlockServer = grpc.ServerStreamingServer[ReadBlockResponse]

func _DataServerService_DeleteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServiceServer).DeleteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServerService_DeleteBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServiceServer).DeleteBlock(ctx, req.(*DeleteBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataServerService_CopyBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServiceServer).CopyBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServerService_CopyBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServiceServer).CopyBlock(ctx, req.(*CopyBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataServerService_ServiceDesc is the grpc.ServiceDesc for DataServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dfs_project.DataServerService",
	HandlerType: (*DataServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteBlock",
			Handler:    _DataServerService_DeleteBlock_Handler,
		},
		{
			MethodName: "CopyBlock",
			Handler:    _DataServerService_CopyBlock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WriteBlock",
			Handler:       _DataServerService_WriteBlock_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadBlock",
			Handler:       _DataServerService_ReadBlock_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dataServer.proto",
}
