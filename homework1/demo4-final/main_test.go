package main

import (
	"fmt"
	"testing"
	"time"
)

func TestCalculate(t *testing.T) {
	tests := []struct {
		name    string
		board   [][]int
		wantMax int
		wantMin int
	}{
		{
			name: "样例1-复杂大盘",
			board: [][]int{
				{-1, -1, -1, 1, -1, -1},
				{-1, -1, 1, -1, 1, -1},
				{1, -1, -1, 1, -1, -1},
				{-1, 2, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1, -1},
				{-1, -1, -1, 1, -1, -1},
				{-1, -1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1, -1},
			},
			wantMax: 22,
			wantMin: 3,
		},
		{
			name: "样例2-全空盘",
			board: [][]int{
				{-1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1},
			},
			wantMax: 25,
			wantMin: 0,
		},
		{
			name: "样例3",
			board: [][]int{
				{-1, -1, -1, 1, -1},
				{-1, -1, 1, -1, 1},
				{-1, -1, -1, 1, -1},
				{-1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1},
			},
			wantMax: 13,
			wantMin: 1,
		},
		{
			name: "样例4",
			board: [][]int{
				{-1, -1, -1, -1, -1},
				{-1, 3, -1, 3, -1},
				{-1, -1, -1, -1, -1},
				{-1, 3, -1, 3, -1},
				{-1, -1, -1, -1, -1},
			},
			wantMax: 12,
			wantMin: 5,
		},
		{
			name: "样例5",
			board: [][]int{
				{-1, -1, -1, -1, -1},
				{-1, 2, -1, 2, -1},
				{-1, -1, 4, -1, -1},
				{-1, 2, -1, 2, -1},
				{-1, -1, -1, -1, -1},
			},
			wantMax: 4,
			wantMin: 4,
		},
		{
			name: "样例6-单数字",
			board: [][]int{
				{-1, -1, -1, 1, -1},
				{-1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1},
			},
			wantMax: 20,
			wantMin: 1,
		},
		{
			name: "样例7-错误样例",
			board: [][]int{
				{100, -1, -1, 1, -1},
				{-1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1},
			},
			wantMax: -1,
			wantMin: -1,
		},
		{
			name: "样例8-错误样例",
			board: [][]int{
				{4, -1, -1, 1, -1},
				{-1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1},
			},
			wantMax: -1,
			wantMin: -1,
		},
		{
			name: "样例9-错误样例",
			board: [][]int{
				{-1, -1, -1, 1, -1},
				{-1, -1, -1, -1, -1},
				{6, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1},
			},
			wantMax: -1,
			wantMin: -1,
		},
		{
			name: "样例10-错误样例",
			board: [][]int{
				{-1, -1, -1, 1, -1},
				{-1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1},
				{3, -1, 1, -1, -1},
			},
			wantMax: -1,
			wantMin: -1,
		},
		{
			name: "样例11-超大棋盘",
			board: [][]int{
				{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1},
				{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
				{-1, -1, 3, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
				{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
			},
			wantMax: 147,
			wantMin: 15,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fmt.Println("测试用例:", tt.name)
			fmt.Println("盘面:")
			for _, row := range tt.board {
				fmt.Println(row)
			}
			start := time.Now()
			gotMax, gotMin := calculate(tt.board)
			duration := time.Since(start)
			fmt.Printf("maxMinesNum: %d, minMinesNum: %d\n", gotMax, gotMin)
			fmt.Printf("耗时: %dμs\n", duration.Microseconds())
			if gotMax != tt.wantMax || gotMin != tt.wantMin {
				t.Errorf("calculate() = (%d, %d), want (%d, %d)", gotMax, gotMin, tt.wantMax, tt.wantMin)
			}
		})
	}
}
